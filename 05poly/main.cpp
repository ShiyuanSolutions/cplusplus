#include <iostream>

using namespace std;

/**
*	期望的行为
	【1】根据实际的对象类型判断如何调用重写函数，即父类指针或是引用指向父类对象，则调用父类中定义的函数；
	父类指针或是引用指向子类对象，则调用子类中定义的函数
	
	解决办法：
	被virtual申明的函数被重写后具有多态性。函数重写必须多态实现，否则没有意义哦
	
	【2】同名覆盖
	
	【3】静态联编，编译期
		-函数重载
	动态联编，运行期
		-函数重写
	
	【4】当类中申明虚函数，编译器会在类中生成一个虚函数表
		 虚函数表时一个存储成员函数地址的数据结构
		 存在虚函数时，每个对象中都有一个指向虚函数表的指针成员变量
	【5】成为虚函数后得付出寻址效率的代价	 
		
*/
int main()
{
    cout << "Hello World!" << endl;
    return 0;
}

