#include <iostream>

using namespace std;
/**
	智能指针:使用对象模拟和替代指针
	
	避免内存泄漏解决方法和思路
	【1】 指针生命周期主动释放堆空间
	【2】 一片堆空间最多只能用一个指针标识,避免重复释放
	【3】杜绝指针运算和指针比较，避免野指针，避免指针越界。以上都满足了，比较就没有意义
	
	解决方案:
	【1】重载特征操作符(->和 *)
	【2】遵守的规定
	【3】只能通过类的成员函数重载
	【4】重载函数不能使用参数，只能定义一个重载函数
	
	问题，可以指向各种各样的类型。
		
	军规：只能使用智能指针管理堆空间的问题，最大程度避免内存问题
*/
int main()
{
    cout << "Hello World!" << endl;
    return 0;
}

